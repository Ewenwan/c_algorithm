2,10c2
< #include "fstream"
< 
< #include "opencv2/highgui.hpp"
< #include "opencv2/imgproc.hpp"
< 
< #include "boost/format.hpp"
< #include "octomap/octomap.h"
< #include "Eigen/Geometry"
< 
---
> #include <fstream>
12d3
< using namespace cv;
14,15c5,6
< int main() {
<     std::cout << "Hello, World!" << std::endl;
---
> #include <opencv2/core/core.hpp>
> #include <opencv2/highgui/highgui.hpp>
17,18c8
<     vector<Mat> colorImgs, depthImgs;
<     vector<Eigen::Isometry3d> poses;
---
> #include <octomap/octomap.h>    // for octomap 
19a10,17
> #include <Eigen/Geometry> 
> #include <boost/format.hpp>  // for formating strings
> 
> int main( int argc, char** argv )
> {
>     vector<cv::Mat> colorImgs, depthImgs;    // 彩色图和深度图
>     vector<Eigen::Isometry3d> poses;         // 相机位姿
>     
23,24c21,22
<         cerr << "Read file failed..." << endl;
<         return EXIT_FAILURE;
---
>         cerr<<"cannot find pose file"<<endl;
>         return 1;
26,27c24,25
< 
<     for (int i = 0; i < 5; ++i)
---
>     
>     for ( int i=0; i<5; i++ )
29,32c27,30
<         boost::format fmt("../data/%s/%d.%s");
<         colorImgs.push_back(imread((fmt%"color"%(i+1)%"png").str()));
<         depthImgs.push_back(imread((fmt%"depth"%(i+1)%"png").str(), IMREAD_UNCHANGED));
< 
---
>         boost::format fmt( "../data/%s/%d.%s" ); //图像文件格式
>         colorImgs.push_back( cv::imread( (fmt%"color"%(i+1)%"png").str() ));
>         depthImgs.push_back( cv::imread( (fmt%"depth"%(i+1)%"pgm").str(), -1 )); // 使用-1读取原始图像
>         
34c32
<         for (int j = 0; j < 7; ++j)
---
>         for ( int i=0; i<7; i++ )
36c34
<             fin >> data[i];
---
>             fin>>data[i];
38c36
<         Eigen::Quaterniond q(data[6], data[3], data[4], data[5]);
---
>         Eigen::Quaterniond q( data[6], data[3], data[4], data[5] );
40,41c38,39
<         T.pretranslate(Eigen::Vector3d(data[0], data[1], data[2]));
<         poses.push_back(T);
---
>         T.pretranslate( Eigen::Vector3d( data[0], data[1], data[2] ));
>         poses.push_back( T );
43,44c41,43
< 
<     // 内参
---
>     
>     // 计算点云并拼接
>     // 相机内参 
50,54c49,55
< 
<     // begin transform into octotree map
<     octomap::OcTree tree(0.05);
< 
<     for (int i = 0; i < 5; ++i)
---
>     
>     cout<<"正在将图像转换为 Octomap ..."<<endl;
>     
>     // octomap tree 
>     octomap::OcTree tree( 0.05 ); // 参数为分辨率
>     
>     for ( int i=0; i<5; i++ )
56,58c57,59
<         Mat color = colorImgs[i];
<         Mat depth = depthImgs[i];
< 
---
>         cout<<"转换图像中: "<<i+1<<endl; 
>         cv::Mat color = colorImgs[i]; 
>         cv::Mat depth = depthImgs[i];
60,65c61,65
< 
<         octomap::Pointcloud cloud;
< 
<         for (int v = 0; v < color.rows; ++v)
<         {
<             for (int u = 0; u < color.cols; ++u)
---
>         
>         octomap::Pointcloud cloud;  // the point cloud in octomap 
>         
>         for ( int v=0; v<color.rows; v++ )
>             for ( int u=0; u<color.cols; u++ )
67,80c67,76
<                 double d = depth.ptr(v)[u];
<                 if (d == 0)
<                     continue;
<                 if (d > 7000)
<                     continue;
< 
<                 Eigen::Vector3d point;
<                 point[2] = d / depthScale;
<                 point[0] = (u  - cx) * point[2] / fx;
<                 point[1] = (v  - cy) * point[2] / fy;
< 
<                 Eigen::Vector3d pointWorld = T * point;
< 
<                 cloud.push_back(pointWorld[0], pointWorld[1], pointWorld[2]);
---
>                 unsigned int d = depth.ptr<unsigned short> ( v )[u]; // 深度值
>                 if ( d==0 ) continue; // 为0表示没有测量到
>                 if ( d >= 7000 ) continue; // 深度太大时不稳定，去掉
>                 Eigen::Vector3d point; 
>                 point[2] = double(d)/depthScale; 
>                 point[0] = (u-cx)*point[2]/fx;
>                 point[1] = (v-cy)*point[2]/fy; 
>                 Eigen::Vector3d pointWorld = T*point;
>                 // 将世界坐标系的点放入点云
>                 cloud.push_back( pointWorld[0], pointWorld[1], pointWorld[2] ); 
82,83c78,80
<         }
<         tree.insertPointCloud(cloud, octomap::point3d(T(0, 3), T(1, 3), T(2, 3)));
---
>             
>         // 将点云存入八叉树地图，给定原点，这样可以计算投射线
>         tree.insertPointCloud( cloud, octomap::point3d( T(0,3), T(1,3), T(2,3) ) );     
85c82,83
< 
---
>     
>     // 更新中间节点的占据信息并写入磁盘
87,89c85,86
<     cout << "Saving Octomap ..." << endl;
<     tree.writeBinary("octomap.bt");
< 
---
>     cout<<"saving octomap ... "<<endl;
>     tree.writeBinary( "octomap.bt" );
91c88
< }
\ No newline at end of file
---
> }
